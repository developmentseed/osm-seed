version: '3'
services:
  ####################################################
  # OSM API and Database section
  ####################################################
  db:
    platform: linux/amd64
    image: osmseed-db:v1
    build:
      context: ./images/db
      dockerfile: Dockerfile
    ports:
      - '5432:5432'
    volumes:
      - ./data/db-data:/var/lib/postgresql/data
    env_file:
      - ./envs/.env.db
  web:
    image: osmseed-web:v1
    build:
      context: ./images/web
      dockerfile: Dockerfile
    ports:
      - '80:80'
    env_file:
      - ./envs/.env.web
      - ./envs/.env.db
    depends_on:
      - db
  ######################################################
  ### OSM processor and also use this image as base for other containers
  ######################################################
  osm-processor:
    image: osmseed-osm-processor:v1
    build:
      context: ./images/osm-processor
      dockerfile: Dockerfile
  ######################################################
  ### Planet replication section
  ######################################################
  planet-dump:
    image: osmseed-planet-dump:v1
    build:
      context: ./images/planet-dump
      dockerfile: Dockerfile
    volumes:
      - ./data/planet-dump-data:/mnt/data
    command: >
      /bin/bash -c "
        echo 'Set cronjob for planet-dump, every 4 minutes';
        while :; do sleep 4m; echo 'Creating the planet dump file...'; /start.sh; done;
      "
    env_file:
      - ./envs/.env.db
      - ./envs/.env.db-utils
      - ./envs/.env.cloudprovider
    depends_on:
      - db
  #####################################################
  ## OSM Database backup and restore section
  #####################################################
  db-backup-restore:
    image: osmseed-backup-restore:v1
    build:
      context: ./images/backup-restore
      dockerfile: Dockerfile
    volumes:
      - ./data/db-backup-restore-data:/mnt/data
    command: >
      /bin/bash -c "
        echo 'Set cron job for backing up DB, every 4 minutes';
        while :; do sleep 4m; echo 'Creating DB backup...'; /start.sh; done;
      "
    env_file:
      - ./envs/.env.db
      - ./envs/.env.db-utils
      - ./envs/.env.cloudprovider
    depends_on:
      - db
  ######################################################
  ### OSM minute replication files section
  ######################################################
  replication-job:
    image: osmseed-replication-job:v1
    build:
      context: ./images/replication-job
      dockerfile: Dockerfile
    volumes:
      - ./data/replication-job-data:/mnt/data
    command: >
      /bin/bash -c "
      echo Sleep the replication-job for 1 minute;
      sleep 1m;
      echo Creating the replication files!;
      /start.sh
      "
    env_file:
      - ./envs/.env.db
      - ./envs/.env.db-utils
      - ./envs/.env.cloudprovider
    depends_on:
      - db
  #####################################################
  ## OSM full planet replication
  #####################################################
  full-history:
    image: osmseed-full-history:v1
    build:
      context: ./images/full-history
      dockerfile: Dockerfile
    volumes:
      - ./data/full-history-data:/mnt/data
    command: >
      /bin/bash -c "
        echo 'Set cron job for full history PBF file, every 4 minutes';
        while :; do sleep 4m; echo 'Creating full history PBF file...'; /start.sh;  done;
      "
    env_file:
      - ./envs/.env.db
      - ./envs/.env.db-utils
      - ./envs/.env.cloudprovider
    depends_on:
      - db
  #####################################################
  ## Populate apidb from PBF file
  #####################################################
  populate-apidb:
    image: osmseed-populate-apidb:v1
    build:
      context: ./images/populate-apidb
      dockerfile: Dockerfile
    volumes:
      - ./data/populate-apidb-data:/mnt/data
    command: >
      /bin/bash -c "
        echo Sleep for a while populate-apidb!;
        sleep 4m;
        echo Starting populate-apidb!;
        /start.sh
      "
    env_file:
      - ./envs/.env.db
      - ./envs/.env.db-utils
  # ######################################################
  # ### Tiler DB
  # ######################################################
  tiler-db:
    image: osmseed-tiler-db:v1
    build:
      context: ./images/tiler-db
      dockerfile: Dockerfile
    ports:
      -  "5433:5432"
    volumes:
      - ./data/tiler-db-data:/var/lib/postgresql/data
    env_file:
      - ./envs/.env.tiler-db
  # ######################################################
  # ### Tiler imposm for importing data
  # ######################################################
  tiler-imposm:
    image: osmseed-tiler-imposm:v1
    build:
      context: ./images/tiler-imposm
      dockerfile: Dockerfile
    volumes:
      - ./data/tiler-imposm-data:/mnt/data
    depends_on:
      - tiler-db
    command: >
      /bin/bash -c "
        echo starting imposm!;
        sleep 1m;
        ./start.sh;
      "
    env_file:
      - ./envs/.env.tiler-db
      - ./envs/.env.tiler-imposm
  # ######################################################
  # ### Tiler imposm for importing data
  # ######################################################
  tiler-server:
    image: osmseed-tiler-server:v1
    build:
      context: ./images/tiler-server
      dockerfile: Dockerfile
    volumes:
      - ./data/tiler-server-data:/mnt/data
    depends_on:
      - tiler-db
      - tiler-imposm
    ports:
      - "9090:9090"
    command: >
      /bin/bash -c "
        echo Starting tiles server!;
        sleep 2m;
        ./start.sh;
      "
    env_file:
      - ./envs/.env.tiler-db
      - ./envs/.env.tiler-server
  #####################################################
  ## Nominatim DB-API section
  #####################################################
  nominatim-db:
    image: nominatim-db:v1
    build:
      context: ./images/nominatim
      dockerfile: Dockerfile
    ports:
      - '5434:5432'
    volumes:
      - ./data/nominatim-db-data:/var/lib/postgresql/data
    command: >
      /bin/bash -c "
        sh /app/start.sh
      "
    env_file:
      - ./envs/.env.nominatim
  nominatim-api:
    image: nominatim-api:v1
    build:
      context: ./images/nominatim
      dockerfile: Dockerfile
    ports:
      - '7070:8080'
    env_file:
      - ./.env.nominatim
    entrypoint: sh /app/startapache.sh
    env_file:
      - ./envs/.env.nominatim
  ######################################################
  ### Overpass API section
  ######################################################
  overpass-api:
    image: osmseed-overpass-api:v1
    build:
      context: ./images/overpass-api
      dockerfile: Dockerfile
    ports:
      - '8081:80'
    volumes:
      - ./data/overpass-api-db-data:/db
    env_file:
      - ./envs/.env.overpass

  ######################################################
  ### Tasking Manager section
  ######################################################
  tasking-manager-api:
    image: osmseed-tasking-manager-api:v1
    build:
      context: ./images/tasking-manager-api
      dockerfile: Dockerfile
    ports:
      - '5000:5000'
    volumes:
      - ./data/tasking-manager-api-db:/db
    env_file:
      - ./envs/.env.tasking-manager
  # #####################################################
  # ## Taginfo section
  # #####################################################
  taginfo:
    image: osmseed-taginfo:v1
    build:
      context: ./images/taginfo
      dockerfile: Dockerfile
    ports:
      - '4567:80'
    volumes:
      - ./data/taginfo-data:/apps/data/
    command: >
      /bin/bash -c "
      ./start.sh"
    env_file:
      - ./envs/.env.taginfo